{"version":3,"file":"apps_blog_src_app_server-page_server-page_module_ts.eda9c838ae5eb265.js","mappings":"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","names":["nextId$1","CDK_ACCORDION","InjectionToken","CdkAccordion","constructor","this","_stateChanges","Subject","_openCloseAllActions","id","multi","openAll","next","closeAll","ngOnChanges","changes","ngOnDestroy","complete","static","ɵfac","t","ɵdir","i0","type","selectors","inputs","booleanAttribute","exportAs","features","provide","useExisting","nextId","CdkAccordionItem","expanded","_expanded","expandedChange","emit","opened","_expansionDispatcher","notify","accordion","closed","_changeDetectorRef","markForCheck","_openCloseAllSubscription","Subscription","EMPTY","EventEmitter","destroyed","disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","unsubscribe","toggle","close","open","subscribe","i1","outputs","useValue","undefined","CdkAccordionModule","ɵmod","ɵinj","_c0","MatExpansionPanel_ng_template_5_Template","rf","ctx","_c1","_c2","MatExpansionPanelHeader_Conditional_4_Template","ctx_r0","_getExpandedState","_c3","_c4","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","trigger","state","style","transform","transition","animate","bodyExpansion","height","visibility","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_template","_expansionPanel","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","hideToggle","_hideToggle","value","coerceBooleanProperty","togglePosition","_togglePosition","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","super","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","event","_hasSpacing","displayMode","ngAfterContentInit","_lazyContent","startWith","filter","_portal","take","TemplatePortal","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","DOCUMENT","ANIMATION_MODULE_TYPE","ɵcmp","contentQueries","dirIndex","_t","first","viewQuery","hostAttrs","hostVars","hostBindings","ngContentSelectors","decls","vars","consts","template","$event","dependencies","i2","styles","encapsulation","data","animation","changeDetection","MatExpansionPanelHeaderBase","_MatExpansionPanelHeaderMixinBase","mixinTabIndex","MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","_parentChangeSubscription","accordionHideToggleChange","parseInt","merge","focusVia","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","origin","options","ngAfterViewInit","monitor","_handleHeaderFocus","stopMonitoring","i2$1","MatExpansionPanelTitle","MatAccordion","arguments","_ownHeaders","QueryList","show","_headers","headers","reset","header","notifyOnChanges","_keyManager","FocusKeyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","ɵMatAccordion_BaseFactory","MatExpansionModule","imports","MatCommonModule","PortalModule","routes","path","component","ServerPageComponent","store","router","ngOnInit","dispatch","loadPsalms","loadProverbs","loadBlogs","loadDiscernments","saveDiscernment","createDiscern","discern","title","json","date","Date","now","toString","Guid","create","navigateByUrl","savePsalm","createPsalm","psalm","saveBlog","createBlog","blog","saveProverb","createProverb","proverb","onChange","change","core","Xpm","ServerPageComponent_ng_template_20_Template","ServerPageComponent_ng_template_26_Template","ServerPageComponent_ng_template_32_Template","ServerPageComponent_ng_template_38_Template","ServerPageModule","oAB","cJS","RouterModule","forChild","CommonModule","SharedModule","MatButtonModule","FormsModule","ReactiveFormsModule","PsalmPageModule","ProverbModule","BlogPageModule","DiscernPageModule","guid","TypeError","isGuid","validator","test","gen","join","createEmpty","parse","raw","count","out","i","Math","random","substring","prototype","equals","other","isEmpty","toJSON","RegExp","exports"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/accordion.mjs","./node_modules/@angular/material/fesm2022/expansion.mjs","./apps/blog/src/app/server-page/server-page.component.html","./apps/blog/src/app/server-page/server-page.module.ts","./apps/blog/src/app/server-page/server-page.component.ts","./node_modules/guid-typescript/dist/guid.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, booleanAttribute, Directive, Input, EventEmitter, Optional, Inject, SkipSelf, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/collections';\nimport { Subject, Subscription } from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /** Emits when the state of the accordion changes */\n        this._stateChanges = new Subject();\n        /** Stream that emits true/false when openAll/closeAll is triggered. */\n        this._openCloseAllActions = new Subject();\n        /** A readonly id value to use for unique selection coordination. */\n        this.id = `cdk-accordion-${nextId$1++}`;\n        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n        this.multi = false;\n    }\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll() {\n        if (this.multi) {\n            this._openCloseAllActions.next(true);\n        }\n    }\n    /** Closes all enabled accordion items. */\n    closeAll() {\n        this._openCloseAllActions.next(false);\n    }\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._openCloseAllActions.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: CdkAccordion, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.0\", type: CdkAccordion, selector: \"cdk-accordion, [cdkAccordion]\", inputs: { multi: [\"multi\", \"multi\", booleanAttribute] }, providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }], exportAs: [\"cdkAccordion\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: CdkAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion, [cdkAccordion]',\n                    exportAs: 'cdkAccordion',\n                    providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }],\n                }]\n        }], propDecorators: { multi: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    /** Whether the AccordionItem is expanded. */\n    get expanded() {\n        return this._expanded;\n    }\n    set expanded(expanded) {\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /** Subscription to openAll/closeAll events. */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /** Event emitted every time the AccordionItem is closed. */\n        this.closed = new EventEmitter();\n        /** Event emitted every time the AccordionItem is opened. */\n        this.opened = new EventEmitter();\n        /** Event emitted when the AccordionItem is destroyed. */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * @docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /** The unique AccordionItem id. */\n        this.id = `cdk-accordion-child-${nextId++}`;\n        this._expanded = false;\n        /** Whether the AccordionItem is disabled. */\n        this.disabled = false;\n        /** Unregister function for _expansionDispatcher. */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener = _expansionDispatcher.listen((id, accordionId) => {\n            if (this.accordion &&\n                !this.accordion.multi &&\n                this.accordion.id === accordionId &&\n                this.id !== id) {\n                this.expanded = false;\n            }\n        });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: CdkAccordionItem, deps: [{ token: CDK_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.0\", type: CdkAccordionItem, selector: \"cdk-accordion-item, [cdkAccordionItem]\", inputs: { expanded: [\"expanded\", \"expanded\", booleanAttribute], disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, providers: [\n            // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n            // registering to the same accordion.\n            { provide: CDK_ACCORDION, useValue: undefined },\n        ], exportAs: [\"cdkAccordionItem\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: CdkAccordionItem, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                    exportAs: 'cdkAccordionItem',\n                    providers: [\n                        // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n                        // registering to the same accordion.\n                        { provide: CDK_ACCORDION, useValue: undefined },\n                    ],\n                }]\n        }], ctorParameters: () => [{ type: CdkAccordion, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_ACCORDION]\n                }, {\n                    type: SkipSelf\n                }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }], propDecorators: { closed: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], destroyed: [{\n                type: Output\n            }], expandedChange: [{\n                type: Output\n            }], expanded: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\nclass CdkAccordionModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: CdkAccordionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.0\", ngImport: i0, type: CdkAccordionModule, declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: CdkAccordionModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: CdkAccordionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkAccordion, CdkAccordionItem],\n                    declarations: [CdkAccordion, CdkAccordionItem],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_ACCORDION, CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport * as i2 from '@angular/cdk/portal';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, SkipSelf, Input, Output, ContentChild, ViewChild, Host, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/collections';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        // Clear the `visibility` while open, otherwise the content will be visible when placed in\n        // a parent that's `visibility: hidden`, because `visibility` doesn't apply to descendants\n        // that have a `visibility` of their own (see #27436).\n        state('expanded', style({ height: '*', visibility: '' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n};\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nconst MAT_EXPANSION_PANEL = new InjectionToken('MAT_EXPANSION_PANEL');\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    constructor(_template, _expansionPanel) {\n        this._template = _template;\n        this._expansionPanel = _expansionPanel;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanelContent, deps: [{ token: i0.TemplateRef }, { token: MAT_EXPANSION_PANEL, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.0\", type: MatExpansionPanelContent, selector: \"ng-template[matExpansionPanelContent]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanelContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matExpansionPanelContent]',\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL]\n                }, {\n                    type: Optional\n                }] }] });\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /** Stream of body animation done events. */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe(event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n            // Render the content as soon as the panel becomes open.\n            this.opened\n                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))\n                .subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanel, deps: [{ token: MAT_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.0\", type: MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, host: { properties: { \"class.mat-expanded\": \"expanded\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-expansion-panel-spacing\": \"_hasSpacing()\" }, classAttribute: \"mat-expansion-panel\" }, providers: [\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n            // to the same accordion.\n            { provide: MAT_ACCORDION, useValue: undefined },\n            { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n        ], queries: [{ propertyName: \"_lazyContent\", first: true, predicate: MatExpansionPanelContent, descendants: true }], viewQueries: [{ propertyName: \"_body\", first: true, predicate: [\"body\"], descendants: true }], exportAs: [\"matExpansionPanel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative;background:var(--mat-expansion-container-background-color);color:var(--mat-expansion-container-text-color);border-radius:var(--mat-expansion-container-shape)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:var(--mat-expansion-container-shape);border-top-left-radius:var(--mat-expansion-container-shape)}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:var(--mat-expansion-container-shape);border-bottom-left-radius:var(--mat-expansion-container-shape)}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible;font-family:var(--mat-expansion-container-text-font);font-size:var(--mat-expansion-container-text-size);font-weight:var(--mat-expansion-container-text-weight);line-height:var(--mat-expansion-container-text-line-height);letter-spacing:var(--mat-expansion-container-text-tracking)}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px;border-top-color:var(--mat-expansion-actions-divider-color)}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: i2.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanel, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel', exportAs: 'matExpansionPanel', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled', 'expanded'], outputs: ['opened', 'closed', 'expandedChange'], animations: [matExpansionAnimations.bodyExpansion], providers: [\n                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                        // to the same accordion.\n                        { provide: MAT_ACCORDION, useValue: undefined },\n                        { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n                    ], host: {\n                        'class': 'mat-expansion-panel',\n                        '[class.mat-expanded]': 'expanded',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                    }, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative;background:var(--mat-expansion-container-background-color);color:var(--mat-expansion-container-text-color);border-radius:var(--mat-expansion-container-shape)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:var(--mat-expansion-container-shape);border-top-left-radius:var(--mat-expansion-container-shape)}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:var(--mat-expansion-container-shape);border-bottom-left-radius:var(--mat-expansion-container-shape)}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible;font-family:var(--mat-expansion-container-text-font);font-size:var(--mat-expansion-container-text-size);font-weight:var(--mat-expansion-container-text-weight);line-height:var(--mat-expansion-container-text-line-height);letter-spacing:var(--mat-expansion-container-text-tracking)}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px;border-top-color:var(--mat-expansion-actions-divider-color)}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [MAT_ACCORDION]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { hideToggle: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }], afterExpand: [{\n                type: Output\n            }], afterCollapse: [{\n                type: Output\n            }], _lazyContent: [{\n                type: ContentChild,\n                args: [MatExpansionPanelContent]\n            }], _body: [{\n                type: ViewChild,\n                args: ['body']\n            }] } });\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanelActionRow, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.0\", type: MatExpansionPanelActionRow, selector: \"mat-action-row\", host: { classAttribute: \"mat-action-row\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanelActionRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-action-row',\n                    host: {\n                        class: 'mat-action-row',\n                    },\n                }]\n        }] });\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nclass MatExpansionPanelHeaderBase {\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n        super();\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        const accordionHideToggleChange = panel.accordion\n            ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])))\n            : EMPTY;\n        this.tabIndex = parseInt(tabIndex || '') || 0;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n            return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }))).subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanelHeader, deps: [{ token: MatExpansionPanel, host: true }, { token: i0.ElementRef }, { token: i2$1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.0.0\", type: MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: { tabIndex: \"tabIndex\", expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, host: { attributes: { \"role\": \"button\" }, listeners: { \"click\": \"_toggle()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.id\": \"panel._headerId\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"_getPanelId()\", \"attr.aria-expanded\": \"_isExpanded()\", \"attr.aria-disabled\": \"panel.disabled\", \"class.mat-expanded\": \"_isExpanded()\", \"class.mat-expansion-toggle-indicator-after\": \"_getTogglePosition() === 'after'\", \"class.mat-expansion-toggle-indicator-before\": \"_getTogglePosition() === 'before'\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"style.height\": \"_getHeaderHeight()\" }, classAttribute: \"mat-expansion-panel-header mat-focus-indicator\" }, usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n\\n@if (_showToggle()) {\\n  <span [@indicatorRotate]=\\\"_getExpandedState()\\\" class=\\\"mat-expansion-indicator\\\"></span>\\n}\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1);height:var(--mat-expansion-header-collapsed-state-height);font-family:var(--mat-expansion-header-text-font);font-size:var(--mat-expansion-header-text-size);font-weight:var(--mat-expansion-header-text-weight);line-height:var(--mat-expansion-header-text-line-height);letter-spacing:var(--mat-expansion-header-text-tracking)}.mat-expansion-panel-header.mat-expanded{height:var(--mat-expansion-header-expanded-state-height)}.mat-expansion-panel-header[aria-disabled=true]{color:var(--mat-expansion-header-disabled-state-text-color)}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-header-hover-state-layer-color)}@media(hover: none){.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-container-background-color)}}.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused{background:var(--mat-expansion-header-focus-state-layer-color)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title{color:var(--mat-expansion-header-text-color)}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title,.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description{color:inherit}.mat-expansion-panel-header-description{flex-grow:2;color:var(--mat-expansion-header-description-color)}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle;color:var(--mat-expansion-header-indicator-color)}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"], animations: [matExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanelHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['tabIndex'], animations: [matExpansionAnimations.indicatorRotate], host: {\n                        'class': 'mat-expansion-panel-header mat-focus-indicator',\n                        'role': 'button',\n                        '[attr.id]': 'panel._headerId',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': '_getPanelId()',\n                        '[attr.aria-expanded]': '_isExpanded()',\n                        '[attr.aria-disabled]': 'panel.disabled',\n                        '[class.mat-expanded]': '_isExpanded()',\n                        '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                        '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[style.height]': '_getHeaderHeight()',\n                        '(click)': '_toggle()',\n                        '(keydown)': '_keydown($event)',\n                    }, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n\\n@if (_showToggle()) {\\n  <span [@indicatorRotate]=\\\"_getExpandedState()\\\" class=\\\"mat-expansion-indicator\\\"></span>\\n}\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1);height:var(--mat-expansion-header-collapsed-state-height);font-family:var(--mat-expansion-header-text-font);font-size:var(--mat-expansion-header-text-size);font-weight:var(--mat-expansion-header-text-weight);line-height:var(--mat-expansion-header-text-line-height);letter-spacing:var(--mat-expansion-header-text-tracking)}.mat-expansion-panel-header.mat-expanded{height:var(--mat-expansion-header-expanded-state-height)}.mat-expansion-panel-header[aria-disabled=true]{color:var(--mat-expansion-header-disabled-state-text-color)}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-header-hover-state-layer-color)}@media(hover: none){.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-container-background-color)}}.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused{background:var(--mat-expansion-header-focus-state-layer-color)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title{color:var(--mat-expansion-header-text-color)}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title,.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description{color:inherit}.mat-expansion-panel-header-description{flex-grow:2;color:var(--mat-expansion-header-description-color)}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle;color:var(--mat-expansion-header-indicator-color)}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"] }]\n        }], ctorParameters: () => [{ type: MatExpansionPanel, decorators: [{\n                    type: Host\n                }] }, { type: i0.ElementRef }, { type: i2$1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }], propDecorators: { expandedHeight: [{\n                type: Input\n            }], collapsedHeight: [{\n                type: Input\n            }] } });\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanelDescription, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.0\", type: MatExpansionPanelDescription, selector: \"mat-panel-description\", host: { classAttribute: \"mat-expansion-panel-header-description\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanelDescription, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-description',\n                    host: {\n                        class: 'mat-expansion-panel-header-description',\n                    },\n                }]\n        }] });\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanelTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.0\", type: MatExpansionPanelTitle, selector: \"mat-panel-title\", host: { classAttribute: \"mat-expansion-panel-header-title\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionPanelTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-title',\n                    host: {\n                        class: 'mat-expansion-panel-header-title',\n                    },\n                }]\n        }] });\n\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /** Headers belonging to this accordion. */\n        this._ownHeaders = new QueryList();\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        this.togglePosition = 'after';\n    }\n    /** Whether the expansion indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle;\n    }\n    set hideToggle(show) {\n        this._hideToggle = coerceBooleanProperty(show);\n    }\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._keyManager?.destroy();\n        this._ownHeaders.destroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAccordion, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.0\", type: MatAccordion, selector: \"mat-accordion\", inputs: { multi: \"multi\", hideToggle: \"hideToggle\", displayMode: \"displayMode\", togglePosition: \"togglePosition\" }, host: { properties: { \"class.mat-accordion-multi\": \"this.multi\" }, classAttribute: \"mat-accordion\" }, providers: [\n            {\n                provide: MAT_ACCORDION,\n                useExisting: MatAccordion,\n            },\n        ], queries: [{ propertyName: \"_headers\", predicate: MatExpansionPanelHeader, descendants: true }], exportAs: [\"matAccordion\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-accordion',\n                    exportAs: 'matAccordion',\n                    inputs: ['multi'],\n                    providers: [\n                        {\n                            provide: MAT_ACCORDION,\n                            useExisting: MatAccordion,\n                        },\n                    ],\n                    host: {\n                        class: 'mat-accordion',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if multiple panel support is enabled.\n                        '[class.mat-accordion-multi]': 'this.multi',\n                    },\n                }]\n        }], propDecorators: { _headers: [{\n                type: ContentChildren,\n                args: [MatExpansionPanelHeader, { descendants: true }]\n            }], hideToggle: [{\n                type: Input\n            }], displayMode: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }] } });\n\nclass MatExpansionModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionModule, declarations: [MatAccordion,\n            MatExpansionPanel,\n            MatExpansionPanelActionRow,\n            MatExpansionPanelHeader,\n            MatExpansionPanelTitle,\n            MatExpansionPanelDescription,\n            MatExpansionPanelContent], imports: [MatCommonModule, CdkAccordionModule, PortalModule], exports: [MatAccordion,\n            MatExpansionPanel,\n            MatExpansionPanelActionRow,\n            MatExpansionPanelHeader,\n            MatExpansionPanelTitle,\n            MatExpansionPanelDescription,\n            MatExpansionPanelContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionModule, imports: [MatCommonModule, CdkAccordionModule, PortalModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatExpansionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CdkAccordionModule, PortalModule],\n                    exports: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                    declarations: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };\n","<h1 style=\"padding: 15px 0px 0px\" class=\"primary-color\">Hidden</h1>\r\n\r\n<button mat-flat-button (click)=\"savePsalm()\">Post Psalm</button>\r\n<button mat-flat-button (click)=\"saveProverb()\">Post Wisdom</button>\r\n<button mat-flat-button (click)=\"saveBlog()\">Post Revelation</button>\r\n<button mat-flat-button (click)=\"saveDiscernment()\">Post Judgement</button>\r\n\r\n<div>Title</div>\r\n<input matInput type=\"text\" [(ngModel)]=\"title\" required />\r\n\r\n<blog-text-editor (editorChanged)=\"onChange($event)\"></blog-text-editor>\r\n\r\n<mat-accordion class=\"example-headers-align\" multi>\r\n  <mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        <h1 style=\"padding: 15px 15px 0px\" class=\"primary-color\">Psalm</h1>\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    <ng-template matExpansionPanelContent>\r\n      <blog-psalm-list [update]=\"true\"></blog-psalm-list>\r\n    </ng-template>\r\n  </mat-expansion-panel>\r\n\r\n  <mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        <h1 style=\"padding: 15px 15px 0px\" class=\"primary-color\">Wisdom</h1>\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    <ng-template matExpansionPanelContent>\r\n      <blog-proverb-list [update]=\"true\"></blog-proverb-list>\r\n    </ng-template>\r\n  </mat-expansion-panel>\r\n\r\n  <mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        <h1 style=\"padding: 15px 15px 0px\" class=\"primary-color\">Revelation</h1>\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    <ng-template matExpansionPanelContent>\r\n      <blog-blog-list [update]=\"true\"></blog-blog-list>\r\n    </ng-template>\r\n  </mat-expansion-panel>\r\n\r\n  <mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        <h1 style=\"padding: 15px 15px 0px\" class=\"primary-color\">Judgement</h1>\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    <ng-template matExpansionPanelContent>\r\n      <blog-discern-list [update]=\"true\"></blog-discern-list>\r\n    </ng-template>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatExpansionModule } from \"@angular/material/expansion\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { BlogPageModule } from \"../blog-page/blog-page.module\";\r\nimport { DiscernPageModule } from \"../discern-page/discern-page.module\";\r\nimport { ProverbModule } from \"../proverb-page/proverb.module\";\r\nimport { PsalmPageModule } from \"../psalm-page/psalm-page.module\";\r\nimport { SharedModule } from \"../shared/shared.module\";\r\nimport { ServerPageComponent } from \"./server-page.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"server/f3bc7c75-cdf7-4c51-beab-3ef81d6a5e5c\",\r\n    component: ServerPageComponent,\r\n  },\r\n];\r\n@NgModule({\r\n  declarations: [ServerPageComponent],\r\n  imports: [\r\n    RouterModule.forChild(routes),\r\n    MatExpansionModule,\r\n    CommonModule,\r\n    SharedModule,\r\n    MatButtonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    PsalmPageModule,\r\n    ProverbModule,\r\n    BlogPageModule,\r\n    DiscernPageModule,\r\n  ],\r\n})\r\nexport class ServerPageModule {}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Guid } from \"guid-typescript\";\r\nimport { createBlog, loadBlogs } from \"../state/blog/blog.actions\";\r\nimport {\r\n  createDiscern,\r\n  loadDiscernments,\r\n} from \"../state/discern/discern.actions\";\r\nimport { createProverb, loadProverbs } from \"../state/proverb/proverbs.actions\";\r\nimport { createPsalm, loadPsalms } from \"../state/psalm/psalm.actions\";\r\nimport { PsalmEntity } from \"../state/psalm/psalm.models\";\r\n@Component({\r\n  selector: \"blog-server-page\",\r\n  templateUrl: \"./server-page.component.html\",\r\n  styleUrls: [\"./server-page.component.scss\"],\r\n})\r\nexport class ServerPageComponent implements OnInit {\r\n  public title!: string;\r\n  private _document!: PsalmEntity;\r\n\r\n  constructor(private store: Store, private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.store.dispatch(loadPsalms());\r\n    this.store.dispatch(loadProverbs());\r\n    this.store.dispatch(loadBlogs());\r\n    this.store.dispatch(loadDiscernments());\r\n  }\r\n\r\n  public saveDiscernment() {\r\n    this.store.dispatch(\r\n      createDiscern({\r\n        discern: {\r\n          title: this.title,\r\n          json: this._document,\r\n          date: Date.now().toString(),\r\n          id: Guid.create().toString(),\r\n        },\r\n      })\r\n    );\r\n\r\n    this.router.navigateByUrl(\"discernments\");\r\n  }\r\n\r\n  public savePsalm() {\r\n    this.store.dispatch(\r\n      createPsalm({\r\n        psalm: {\r\n          title: this.title,\r\n          json: this._document,\r\n          date: Date.now().toString(),\r\n          id: Guid.create().toString(),\r\n        },\r\n      })\r\n    );\r\n\r\n    this.router.navigateByUrl(\"psalms\");\r\n  }\r\n\r\n  public saveBlog() {\r\n    this.store.dispatch(\r\n      createBlog({\r\n        blog: {\r\n          title: this.title,\r\n          json: this._document,\r\n          date: Date.now().toString(),\r\n          id: Guid.create().toString(),\r\n        },\r\n      })\r\n    );\r\n\r\n    this.router.navigateByUrl(\"blogs\");\r\n  }\r\n\r\n  public saveProverb() {\r\n    this.store.dispatch(\r\n      createProverb({\r\n        proverb: {\r\n          title: this.title,\r\n          json: this._document,\r\n          date: Date.now().toString(),\r\n          id: Guid.create().toString(),\r\n        },\r\n      })\r\n    );\r\n\r\n    this.router.navigateByUrl(\"proverbs\");\r\n  }\r\n\r\n  public onChange(change: PsalmEntity) {\r\n    this._document = change;\r\n  }\r\n}\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n"],"x_google_ignoreList":[0,1,5]}