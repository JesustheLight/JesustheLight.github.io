{"version":3,"file":"common.734388fa5bc264b4.js","mappings":"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","names":["getBlogState","createFeatureSelector","BLOG_FEATURE_KEY","selectAll","selectEntities","blogAdapter","getSelectors","getAllBlog","getBlogLoaded","createSelector","state","loaded","getBlogError","error","getBlogEntities","getSelectedId","id","getSelected","entities","selectedId","undefined","i0","_r5","blog_r1","$implicit","ctx_r3","doUpdate","BlogListComponent_div_0_button_6_Template","$event","_r7","json","title","date","ctx_r0","update","BlogListComponent","constructor","store","router","this","ngOnInit","blogs$","select","pipe","map","blog","cloneDeep","dispatch","createBlog","static","t","i1","i2","core","Xpm","selectors","inputs","decls","vars","consts","template","rf","ctx","BlogListComponent_div_0_Template","routes","path","component","BlogPageComponent","loadBlogs","BlogPageModule","oAB","cJS","CommonModule","MatDividerModule","SharedModule","RouterModule","forChild","MatButtonModule","getDiscernmentsState","DiscernmentsFeatureKey","discernAdapter","getAllDiscern","getDiscernLoaded","getDiscernError","getDiscernEntities","discern_r1","DiscernListComponent_div_0_button_6_Template","DiscernListComponent","discernments$","discern","createDiscern","DiscernListComponent_div_0_Template","DiscernPageComponent","loadDiscernments","DiscernPageModule","getProverbsState","proverbsFeatureKey","proverbAdapter","getAllProverb","getProverbLoaded","getProverbError","getProverbEntities","proverb_r1","ProverbListComponent_div_0_button_6_Template","ProverbListComponent","proverbs$","proverb","createProverb","ProverbListComponent_div_0_Template","ProverbPageComponent","loadProverbs","ProverbModule","getPsalmState","PSALM_FEATURE_KEY","psalmAdapter","getAllPsalm","getPsalmLoaded","getPsalmError","getPsalmEntities","psalm_r1","PsalmListComponent_div_0_button_6_Template","PsalmListComponent","psalms$","psalms","lodash","psalm","createPsalm","PsalmListComponent_div_0_Template","PsalmPageComponent","loadPsalms","PsalmPageModule"],"sourceRoot":"webpack:///","sources":["./apps/blog/src/app/state/blog/blog.selectors.ts","./apps/blog/src/app/blog-page/blog-list/blog-list.component.html","./apps/blog/src/app/blog-page/blog-list/blog-list.component.ts","./apps/blog/src/app/blog-page/blog-page.module.ts","./apps/blog/src/app/blog-page/blog-page.component.ts","./apps/blog/src/app/blog-page/blog-page.component.html","./apps/blog/src/app/state/discern/discern.selectors.ts","./apps/blog/src/app/discern-page/discern-list/discern-list.component.html","./apps/blog/src/app/discern-page/discern-list/discern-list.component.ts","./apps/blog/src/app/discern-page/discern-page.module.ts","./apps/blog/src/app/discern-page/discern-page.component.ts","./apps/blog/src/app/discern-page/discern-page.component.html","./apps/blog/src/app/state/proverb/proverbs.selectors.ts","./apps/blog/src/app/proverb-page/proverb-list/proverb-list.component.html","./apps/blog/src/app/proverb-page/proverb-list/proverb-list.component.ts","./apps/blog/src/app/proverb-page/proverb.module.ts","./apps/blog/src/app/proverb-page/proverb-page.component.ts","./apps/blog/src/app/proverb-page/proverb-page.component.html","./apps/blog/src/app/state/psalm/psalm.selectors.ts","./apps/blog/src/app/psalm-page/psalm-list/psalm-list.component.html","./apps/blog/src/app/psalm-page/psalm-list/psalm-list.component.ts","./apps/blog/src/app/psalm-page/psalm-page.module.ts","./apps/blog/src/app/psalm-page/psalm-page.component.ts","./apps/blog/src/app/psalm-page/psalm-page.component.html"],"sourcesContent":["import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { blogAdapter, BLOG_FEATURE_KEY, State } from \"./blog.reducer\";\n\n// Lookup the 'Blog' feature state managed by NgRx\nexport const getBlogState = createFeatureSelector<State>(BLOG_FEATURE_KEY);\n\nconst { selectAll, selectEntities } = blogAdapter.getSelectors();\n\nexport const getBlogLoaded = createSelector(\n  getBlogState,\n  (state: State) => state.loaded\n);\n\nexport const getBlogError = createSelector(\n  getBlogState,\n  (state: State) => state.error\n);\n\nexport const getAllBlog = createSelector(getBlogState, (state: State) =>\n  selectAll(state)\n);\n\nexport const getBlogEntities = createSelector(getBlogState, (state: State) =>\n  selectEntities(state)\n);\n\nexport const getSelectedId = createSelector(\n  getBlogState,\n  (state: State) => state.id\n);\n\nexport const getSelected = createSelector(\n  getBlogEntities,\n  getSelectedId,\n  (entities, selectedId) => (selectedId ? entities[selectedId] : undefined)\n);\n","<div class=\"blog-item\" *ngFor=\"let blog of blogs$ | async\">\n  <div class=\"blog-title\">{{ blog.title }}</div>\n  <div>{{ blog.date | date: \"short\" }}</div>\n\n  <button mat-flat-button *ngIf=\"update\" (click)=\"doUpdate(blog)\">\n    Update\n  </button>\n\n  <blog-text-editor\n    [readonly]=\"!update\"\n    [document]=\"blog.json\"\n    (editorChanged)=\"blog.json = $event\"\n  ></blog-text-editor>\n\n  <mat-divider></mat-divider>\n</div>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Store } from \"@ngrx/store\";\nimport { cloneDeep } from \"lodash-es\";\nimport { Observable, map } from \"rxjs\";\nimport { createBlog } from \"../../state/blog/blog.actions\";\nimport { BlogEntity } from \"../../state/blog/blog.models\";\nimport { getAllBlog } from \"../../state/blog/blog.selectors\";\n\n@Component({\n  selector: \"blog-blog-list\",\n  templateUrl: \"./blog-list.component.html\",\n  styleUrls: [\"./blog-list.component.scss\"],\n})\nexport class BlogListComponent implements OnInit {\n  @Input() public update = false;\n\n  public blogs$!: Observable<BlogEntity[]>;\n\n  constructor(private store: Store, private router: Router) {}\n\n  ngOnInit(): void {\n    this.blogs$ = this.store\n      .select(getAllBlog)\n      .pipe(map((blog) => cloneDeep(blog)));\n  }\n\n  public doUpdate(blog: BlogEntity) {\n    this.store.dispatch(\n      createBlog({\n        blog,\n      })\n    );\n\n    // this.router.navigateByUrl(\"blogs\");\n  }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatDividerModule } from \"@angular/material/divider\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { BlogListComponent } from \"./blog-list/blog-list.component\";\nimport { BlogPageComponent } from \"./blog-page.component\";\nconst routes: Routes = [\n  {\n    path: \"blogs\",\n    component: BlogPageComponent,\n  },\n];\n@NgModule({\n  declarations: [BlogPageComponent, BlogListComponent],\n  imports: [\n    CommonModule,\n    MatDividerModule,\n    SharedModule,\n    RouterModule.forChild(routes),\n    MatButtonModule,\n  ],\n  exports: [BlogListComponent],\n})\nexport class BlogPageModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { loadBlogs } from \"../state/blog/blog.actions\";\n\n@Component({\n  selector: \"blog-blog-page\",\n  templateUrl: \"./blog-page.component.html\",\n  styleUrls: [\"./blog-page.component.scss\"],\n})\nexport class BlogPageComponent implements OnInit {\n  constructor(private store: Store) {}\n\n  ngOnInit(): void {\n    this.store.dispatch(loadBlogs());\n  }\n}\n","<router-outlet></router-outlet>\n<h1 style=\"padding: 15px 0px 0px\" class=\"primary-color\">God bless you</h1>\n<h1 style=\"padding: 15px 15px 0px\" class=\"primary-color\">Revelations</h1>\n<blog-blog-list></blog-blog-list>\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport {\n  DiscernmentsFeatureKey,\n  State,\n  discernAdapter,\n} from \"./discern.reducer\";\n\nexport const getDiscernmentsState = createFeatureSelector<State>(\n  DiscernmentsFeatureKey\n);\n\nconst { selectAll, selectEntities } = discernAdapter.getSelectors();\n\nexport const getDiscernLoaded = createSelector(\n  getDiscernmentsState,\n  (state: State) => state.loaded\n);\n\nexport const getDiscernError = createSelector(\n  getDiscernmentsState,\n  (state: State) => state.error\n);\n\nexport const getAllDiscern = createSelector(\n  getDiscernmentsState,\n  (state: State) => selectAll(state)\n);\n\nexport const getDiscernEntities = createSelector(\n  getDiscernmentsState,\n  (state: State) => selectEntities(state)\n);\n\nexport const getSelectedId = createSelector(\n  getDiscernmentsState,\n  (state: State) => state.id\n);\n\nexport const getSelected = createSelector(\n  getDiscernEntities,\n  getSelectedId,\n  (entities, selectedId) => (selectedId ? entities[selectedId] : undefined)\n);\n","<div class=\"discern-item\" *ngFor=\"let discern of discernments$ | async\">\n  <div class=\"discern-title\">{{ discern.title }}</div>\n  <div>{{ discern.date | date: \"short\" }}</div>\n\n  <button mat-flat-button *ngIf=\"update\" (click)=\"doUpdate(discern)\">\n    Update\n  </button>\n\n  <blog-text-editor\n    [readonly]=\"!update\"\n    [document]=\"discern.json\"\n    (editorChanged)=\"discern.json = $event\"\n  ></blog-text-editor>\n\n  <mat-divider></mat-divider>\n</div>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Store } from \"@ngrx/store\";\nimport { cloneDeep } from \"lodash-es\";\nimport { Observable, map } from \"rxjs\";\nimport { createDiscern } from \"../../state/discern/discern.actions\";\nimport { DiscernEntity } from \"../../state/discern/discern.models\";\nimport { getAllDiscern } from \"../../state/discern/discern.selectors\";\n\n@Component({\n  selector: \"blog-discern-list\",\n  templateUrl: \"./discern-list.component.html\",\n  styleUrls: [\"./discern-list.component.scss\"],\n})\nexport class DiscernListComponent implements OnInit {\n  @Input() public update = false;\n\n  public discernments$!: Observable<DiscernEntity[]>;\n\n  constructor(private store: Store, private router: Router) {}\n\n  ngOnInit(): void {\n    this.discernments$ = this.store\n      .select(getAllDiscern)\n      .pipe(map((discern) => cloneDeep(discern)));\n  }\n\n  public doUpdate(discern: DiscernEntity) {\n    this.store.dispatch(\n      createDiscern({\n        discern,\n      })\n    );\n\n    // this.router.navigateByUrl(\"discernments\");\n  }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatDividerModule } from \"@angular/material/divider\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { DiscernListComponent } from \"./discern-list/discern-list.component\";\nimport { DiscernPageComponent } from \"./discern-page.component\";\nconst routes: Routes = [\n  {\n    path: \"discernments\",\n    component: DiscernPageComponent,\n  },\n];\n@NgModule({\n  declarations: [DiscernListComponent, DiscernPageComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    MatDividerModule,\n    SharedModule,\n    MatButtonModule,\n  ],\n  exports: [DiscernListComponent],\n})\nexport class DiscernPageModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { loadDiscernments } from \"../state/discern/discern.actions\";\n\n@Component({\n  selector: \"blog-discern-page\",\n  templateUrl: \"./discern-page.component.html\",\n  styleUrls: [\"./discern-page.component.scss\"],\n})\nexport class DiscernPageComponent implements OnInit {\n  constructor(private store: Store) {}\n\n  ngOnInit(): void {\n    this.store.dispatch(loadDiscernments());\n  }\n}\n","<router-outlet></router-outlet>\n<h1 style=\"padding: 15px 0px 0px\" class=\"primary-color\">God keep you</h1>\n<h1 style=\"padding: 15px 15px 0px\" class=\"primary-color\">Judgements</h1>\n<blog-discern-list></blog-discern-list>\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { proverbAdapter, proverbsFeatureKey, State } from \"./proverbs.reducer\";\n\nexport const getProverbsState =\n  createFeatureSelector<State>(proverbsFeatureKey);\n\nconst { selectAll, selectEntities } = proverbAdapter.getSelectors();\n\nexport const getProverbLoaded = createSelector(\n  getProverbsState,\n  (state: State) => state.loaded\n);\n\nexport const getProverbError = createSelector(\n  getProverbsState,\n  (state: State) => state.error\n);\n\nexport const getAllProverb = createSelector(getProverbsState, (state: State) =>\n  selectAll(state)\n);\n\nexport const getProverbEntities = createSelector(\n  getProverbsState,\n  (state: State) => selectEntities(state)\n);\n\nexport const getSelectedId = createSelector(\n  getProverbsState,\n  (state: State) => state.id\n);\n\nexport const getSelected = createSelector(\n  getProverbEntities,\n  getSelectedId,\n  (entities, selectedId) => (selectedId ? entities[selectedId] : undefined)\n);\n","<div class=\"proverb-item\" *ngFor=\"let proverb of proverbs$ | async\">\n  <div class=\"proverb-title\">{{ proverb.title }}</div>\n  <div>{{ proverb.date | date: \"short\" }}</div>\n\n  <button mat-flat-button *ngIf=\"update\" (click)=\"doUpdate(proverb)\">\n    Update\n  </button>\n\n  <blog-text-editor\n    [readonly]=\"!update\"\n    [document]=\"proverb.json\"\n    (editorChanged)=\"proverb.json = $event\"\n  ></blog-text-editor>\n\n  <mat-divider></mat-divider>\n</div>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Store } from \"@ngrx/store\";\nimport { cloneDeep } from \"lodash-es\";\nimport { Observable, map } from \"rxjs\";\nimport { ProverbEntity } from \"../../state/proverb/proverb.models\";\nimport { createProverb } from \"../../state/proverb/proverbs.actions\";\nimport { getAllProverb } from \"../../state/proverb/proverbs.selectors\";\n\n@Component({\n  selector: \"blog-proverb-list\",\n  templateUrl: \"./proverb-list.component.html\",\n  styleUrls: [\"./proverb-list.component.scss\"],\n})\nexport class ProverbListComponent implements OnInit {\n  @Input() public update = false;\n\n  public proverbs$!: Observable<ProverbEntity[]>;\n\n  constructor(private store: Store, private router: Router) {}\n\n  ngOnInit(): void {\n    this.proverbs$ = this.store\n      .select(getAllProverb)\n      .pipe(map((proverb) => cloneDeep(proverb)));\n  }\n\n  public doUpdate(proverb: ProverbEntity) {\n    this.store.dispatch(\n      createProverb({\n        proverb,\n      })\n    );\n\n    // this.router.navigateByUrl(\"proverbs\");\n  }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatDividerModule } from \"@angular/material/divider\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { ProverbListComponent } from \"./proverb-list/proverb-list.component\";\nimport { ProverbPageComponent } from \"./proverb-page.component\";\nconst routes: Routes = [\n  {\n    path: \"proverbs\",\n    component: ProverbPageComponent,\n  },\n];\n@NgModule({\n  declarations: [ProverbPageComponent, ProverbListComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild(routes),\n    MatDividerModule,\n    MatButtonModule,\n  ],\n  exports: [ProverbListComponent],\n})\nexport class ProverbModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { loadProverbs } from \"../state/proverb/proverbs.actions\";\n\n@Component({\n  selector: \"blog-proverb-page\",\n  templateUrl: \"./proverb-page.component.html\",\n  styleUrls: [\"./proverb-page.component.scss\"],\n})\nexport class ProverbPageComponent implements OnInit {\n  constructor(private store: Store) {}\n\n  ngOnInit(): void {\n    this.store.dispatch(loadProverbs());\n  }\n}\n","<router-outlet></router-outlet>\n\n<h1 style=\"padding: 15px 0px 0px\" class=\"primary-color\">\n  May He be gracious to you\n</h1>\n<h1 style=\"padding: 15px 15px 0px\" class=\"primary-color\">Wisdom</h1>\n<blog-proverb-list></blog-proverb-list>\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { PSALM_FEATURE_KEY, State, psalmAdapter } from \"./psalm.reducer\";\n\nexport const getPsalmState = createFeatureSelector<State>(PSALM_FEATURE_KEY);\n\nconst { selectAll, selectEntities } = psalmAdapter.getSelectors();\n\nexport const getPsalmLoaded = createSelector(\n  getPsalmState,\n  (state: State) => state.loaded\n);\n\nexport const getPsalmError = createSelector(\n  getPsalmState,\n  (state: State) => state.error\n);\n\nexport const getAllPsalm = createSelector(getPsalmState, (state: State) =>\n  selectAll(state)\n);\n\nexport const getPsalmEntities = createSelector(getPsalmState, (state: State) =>\n  selectEntities(state)\n);\n\nexport const getSelectedId = createSelector(\n  getPsalmState,\n  (state: State) => state.id\n);\n\nexport const getSelected = createSelector(\n  getPsalmEntities,\n  getSelectedId,\n  (entities, selectedId) => (selectedId ? entities[selectedId] : undefined)\n);\n","<div class=\"psalm-item\" *ngFor=\"let psalm of psalms$ | async\">\n  <div class=\"psalm-title\">{{ psalm.title }}</div>\n  <div>{{ psalm.date | date: \"short\" }}</div>\n\n  <button mat-flat-button *ngIf=\"update\" (click)=\"doUpdate(psalm)\">\n    Update\n  </button>\n\n  <blog-text-editor\n    [readonly]=\"!update\"\n    [document]=\"psalm.json\"\n    (editorChanged)=\"psalm.json = $event\"\n  ></blog-text-editor>\n\n  <mat-divider></mat-divider>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Store } from \"@ngrx/store\";\nimport * as lodash from \"lodash-es\";\nimport { Observable, map } from \"rxjs\";\nimport { createPsalm } from \"../../state/psalm/psalm.actions\";\nimport { PsalmEntity } from \"../../state/psalm/psalm.models\";\nimport { getAllPsalm } from \"../../state/psalm/psalm.selectors\";\n@Component({\n  selector: \"blog-psalm-list\",\n  templateUrl: \"./psalm-list.component.html\",\n  styleUrls: [\"./psalm-list.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PsalmListComponent implements OnInit {\n  @Input() public update = false;\n\n  public psalms$!: Observable<PsalmEntity[]>;\n\n  constructor(private store: Store, private router: Router) {}\n\n  ngOnInit(): void {\n    this.psalms$ = this.store\n      .select(getAllPsalm)\n      .pipe(map((psalms) => lodash.cloneDeep(psalms)));\n  }\n\n  public doUpdate(psalm: PsalmEntity) {\n    this.store.dispatch(\n      createPsalm({\n        psalm,\n      })\n    );\n\n    // this.router.navigateByUrl(\"psalms\");\n  }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatDividerModule } from \"@angular/material/divider\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { PsalmListComponent } from \"./psalm-list/psalm-list.component\";\nimport { PsalmPageComponent } from \"./psalm-page.component\";\nconst routes: Routes = [\n  {\n    path: \"psalms\",\n    component: PsalmPageComponent,\n  },\n];\n@NgModule({\n  declarations: [PsalmPageComponent, PsalmListComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild(routes),\n    MatDividerModule,\n    MatButtonModule,\n  ],\n  exports: [PsalmListComponent],\n})\nexport class PsalmPageModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { loadPsalms } from \"../state/psalm/psalm.actions\";\n\n@Component({\n  selector: \"blog-psalm-page\",\n  templateUrl: \"./psalm-page.component.html\",\n  styleUrls: [\"./psalm-page.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PsalmPageComponent implements OnInit {\n  constructor(private store: Store) {}\n\n  ngOnInit(): void {\n    this.store.dispatch(loadPsalms());\n  }\n}\n","<router-outlet></router-outlet>\n\n<h1 style=\"padding: 15px 0px 0px\" class=\"primary-color\">\n  May He give you peace\n</h1>\n<h1 style=\"padding: 15px 15px 0px\" class=\"primary-color\">Psalms</h1>\n<blog-psalm-list></blog-psalm-list>\n"],"x_google_ignoreList":[]}